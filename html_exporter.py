"""
HTML export utilities for OpenFAST Plotter
Adds metadata to HTML exports
"""

import plotly


def add_metadata_to_html(html_content, metadata, plot_type="Plot"):
    """
    Add metadata information to HTML content by directly injecting it into the HTML

    Args:
        html_content (str): Original HTML content
        metadata (dict): Metadata dictionary with keys: datetime, system, user, version
        plot_type (str): Type of plot (Time Domain or FFT)

    Returns:
        str: HTML content with metadata added
    """
    if not html_content:
        return html_content

    # Extract metadata values
    timestamp = metadata.get("datetime", "Unknown")
    system = metadata.get("system", "Unknown")
    username = metadata.get("user", "Unknown")
    version = metadata.get("version", "Unknown")

    # Create metadata HTML section
    metadata_html = f"""
    <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px; padding: 15px; margin: 10px 0; font-family: sans-serif;">
        <h3>Remote OpenFAST Plotter - {plot_type}</h3>
        <table style="margin-bottom: 15px; border-collapse: collapse; width: auto;">
            <tr>
                <td style="padding: 5px 15px 5px 0; font-weight: bold;">Date & Time:</td>
                <td>{timestamp}</td>
            </tr>
            <tr>
                <td style="padding: 5px 15px 5px 0; font-weight: bold;">System:</td>
                <td>{system}</td>
            </tr>
            <tr>
                <td style="padding: 5px 15px 5px 0; font-weight: bold;">Generated by:</td>
                <td>{username}</td>
            </tr>
            <tr>
                <td style="padding: 5px 15px 5px 0; font-weight: bold;">App Version:</td>
                <td>{version}</td>
            </tr>
        </table>
    </div>
    """

    # Check for plotly.js script tag to insert our content right after it
    script_pos = html_content.find(
        '<script type="text/javascript">window.PlotlyConfig')
    if script_pos >= 0:
        # Find the end of the script tag to insert content
        script_end_pos = html_content.find('</script>', script_pos)
        if script_end_pos >= 0:
            return html_content[:script_end_pos + 9] + \
                metadata_html + html_content[script_end_pos + 9:]

    # If no plotly script tag, look for body tag
    body_pos = html_content.find("<body>")
    if body_pos >= 0:
        return html_content[:body_pos + 6] + \
            metadata_html + html_content[body_pos + 6:]

    # Last resort: add at the beginning
    return "<html><head><meta charset='utf-8'></head><body>" + \
        metadata_html + html_content + "</body></html>"


def inject_title_and_metadata(html_content, metadata, plot_type="Plot"):
    """
    Inject a title and metadata directly into the HTML content as a visible section

    Args:
        html_content (str): Original HTML content
        metadata (dict): Metadata dictionary
        plot_type (str): Type of plot

    Returns:
        str: HTML content with title and metadata
    """
    if not html_content or "<div" not in html_content:
        return html_content

    # Extract metadata values
    timestamp = metadata.get("datetime", "Unknown")
    system = metadata.get("system", "Unknown")
    username = metadata.get("user", "Unknown")
    version = metadata.get("version", "Unknown")

    # Create header HTML with metadata
    header_html = f"""
    <div style="width:100%; padding:10px; background-color:#f8f9fa; border-bottom:1px solid #dee2e6; margin-bottom:15px;">
        <h2 style="margin:0 0 10px 0; color:#333; font-family:sans-serif;">Remote OpenFAST Plotter - {plot_type}</h2>
        <div style="display:flex; flex-wrap:wrap; font-family:sans-serif; font-size:14px; color:#555;">
            <div style="margin-right:20px;"><strong>Date & Time:</strong> {timestamp}</div>
            <div style="margin-right:20px;"><strong>System:</strong> {system}</div>
            <div style="margin-right:20px;"><strong>Generated by:</strong> {username}</div>
            <div><strong>App Version:</strong> {version}</div>
        </div>
    </div>
    """

    # Find the first div tag to insert our header before it
    first_div_pos = html_content.find('<div')
    if first_div_pos >= 0:
        return html_content[:first_div_pos] + \
            header_html + html_content[first_div_pos:]

    # If no div tag found, insert after body or at beginning
    body_pos = html_content.find("<body>")
    if body_pos >= 0:
        return html_content[:body_pos + 6] + \
            header_html + html_content[body_pos + 6:]

    # Last resort
    return header_html + html_content


def prepare_html_for_export(
        fig_html,
        metadata,
        title="OpenFAST Plot",
        plot_type="Time Domain"):
    """
    Prepare plotly figure HTML for export with metadata

    Args:
        fig_html (str): HTML string from plotly figure
        metadata (dict): Metadata dictionary
        title (str): Title for the HTML page
        plot_type (str): Type of plot (Time Domain or FFT)

    Returns:
        str: Complete HTML with metadata
    """
    # Add proper HTML structure if not already present
    if not fig_html.startswith("<html>"):
        fig_html = f"""<html>
<head>
    <meta charset="utf-8" />
    <title>{title}</title>
</head>
<body>
    {fig_html}
</body>
</html>"""

    # Add title and metadata visibly in the HTML content
    fig_html = inject_title_and_metadata(fig_html, metadata, plot_type)

    # Ensure the HTML is well-formed
    if "</html>" not in fig_html:
        fig_html += "</body></html>"

    return fig_html


def combine_multiple_plots_to_html(
        fig_html_list,
        metadata,
        title="OpenFAST FFT Plots",
        plot_type="FFT Analysis"):
    """
    Combine multiple plot HTMLs into a single HTML file with metadata

    Args:
        fig_html_list (list): List of HTML strings from plotly figures
        metadata (dict): Metadata dictionary
        title (str): Title for the HTML page
        plot_type (str): Type of plot (Time Domain or FFT)

    Returns:
        str: Complete HTML with all plots and metadata
    """
    # This function has issues with incomplete HTML - let's create a
    # completely new approach

    # Build a proper HTML document from scratch
    html_output = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #fafafa;
        }}
        .plot-container {{
            margin-bottom: 40px;
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .metadata-header {{
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 20px;
        }}
        .metadata-table {{
            margin-bottom: 15px;
            border-collapse: collapse;
            width: auto;
        }}
        .metadata-table td {{
            padding: 5px 15px 5px 0;
        }}
        .metadata-table td:first-child {{
            font-weight: bold;
        }}
        h2 {{
            margin-top: 0;
            color: #333;
        }}
        h3 {{
            margin-bottom: 15px;
        }}
    </style>
"""

    # Extract timestamp and other metadata
    timestamp = metadata.get("datetime", "Unknown")
    system = metadata.get("system", "Unknown")
    username = metadata.get("user", "Unknown")
    version = metadata.get("version", "Unknown")

    # Add metadata header
    html_output += f"""
</head>
<body>
    <div class="metadata-header">
        <h2>Remote OpenFAST Plotter - {plot_type}</h2>
        <table class="metadata-table">
            <tr>
                <td>Date & Time:</td>
                <td>{timestamp}</td>
            </tr>
            <tr>
                <td>System:</td>
                <td>{system}</td>
            </tr>
            <tr>
                <td>Generated by:</td>
                <td>{username}</td>
            </tr>
            <tr>
                <td>App Version:</td>
                <td>{version}</td>
            </tr>
        </table>
    </div>
"""

    # Extract necessary JavaScript from the first figure
    if fig_html_list and len(fig_html_list) > 0:
        first_fig = fig_html_list[0]
        scripts = []

        # Look for Plotly config script
        config_script_start = first_fig.find(
            '<script type="text/javascript">window.PlotlyConfig')
        if config_script_start >= 0:
            config_script_end = first_fig.find(
                '</script>', config_script_start)
            if config_script_end >= 0:
                scripts.append(
                    first_fig[config_script_start:config_script_end + 9])

        # Look for plotly-latest-min.js script
        plotly_script_start = first_fig.find(
            '<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>')
        if plotly_script_start >= 0:
            scripts.append(
                '<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>')

        # Look for mathjax script
        mathjax_script_start = first_fig.find(
            '<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax')
        if mathjax_script_start >= 0:
            mathjax_script_end = first_fig.find(
                '</script>', mathjax_script_start)
            if mathjax_script_end >= 0:
                scripts.append(
                    first_fig[mathjax_script_start:mathjax_script_end + 9])

    # Import Plotly directly if we couldn't find it
    if not scripts or not any('plotly' in script for script in scripts):
        scripts = [
            '<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>']

    # Now directly generate figures using Plotly.js instead of trying to
    # extract divs
    html_output += """
    <div id="plots-container">
"""

    # Create empty divs for each plot
    for i in range(len(fig_html_list)):
        html_output += f"""        <div id="plot-{i}" class="plot-container"></div>\n"""

    html_output += "    </div>\n"

    # Add scripts
    for script in scripts:
        html_output += f"    {script}\n"

    # Now add script to create plots
    html_output += """
    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function() {
"""

    # Add all figures by extracting JSON data
    for i, fig_html in enumerate(fig_html_list):
        # Try to extract JSON data
        data_start = fig_html.find('{"data"')
        if data_start >= 0:
            # Find matching closing brace by counting braces
            open_braces = 0
            pos = data_start
            while pos < len(fig_html):
                if fig_html[pos] == '{':
                    open_braces += 1
                elif fig_html[pos] == '}':
                    open_braces -= 1
                    if open_braces == 0:
                        break
                pos += 1

            if pos < len(fig_html):
                figure_json = fig_html[data_start:pos + 1]
                html_output += f"""
            try {{
                var figure{i} = {figure_json};
                Plotly.newPlot('plot-{i}', figure{i}.data, figure{i}.layout, {{responsive: true}});
            }} catch (e) {{
                console.error('Error plotting figure {i}:', e);
                document.getElementById('plot-{i}').innerHTML = '<p style="color:red;">Error plotting figure {i}: ' + e.message + '</p>';
            }}
"""

    html_output += """
        });
    </script>
</body>
</html>"""

    return html_output


def export_figures_from_plotly_objects(
        figs,
        metadata,
        title="OpenFAST Plots",
        plot_type="Analysis"):
    """
    Export directly from Plotly figure objects instead of HTML strings

    Args:
        figs (list): List of plotly.graph_objects.Figure objects
        metadata (dict): Metadata dictionary
        title (str): Title for the HTML page
        plot_type (str): Type of plot (Time Domain or FFT)

    Returns:
        str: Complete HTML with all plots and metadata
    """
    # import plotly # Moved to top

    # Build HTML header and metadata section
    html_output = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #fafafa;
        }}
        .plot-container {{
            margin-bottom: 40px;
            background-color: white;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .metadata-header {{
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 20px;
        }}
        .metadata-table {{
            margin-bottom: 15px;
            border-collapse: collapse;
            width: auto;
        }}
        .metadata-table td {{
            padding: 5px 15px 5px 0;
        }}
        .metadata-table td:first-child {{
            font-weight: bold;
        }}
        h2 {{
            margin-top: 0;
            color: #333;
        }}
        h3 {{
            margin-bottom: 15px;
        }}
    </style>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
"""

    # Extract metadata
    timestamp = metadata.get("datetime", "Unknown")
    system = metadata.get("system", "Unknown")
    username = metadata.get("user", "Unknown")
    version = metadata.get("version", "Unknown")

    # Add metadata header
    html_output += f"""
    <div class="metadata-header">
        <h2>Remote OpenFAST Plotter - {plot_type}</h2>
        <table class="metadata-table">
            <tr>
                <td>Date & Time:</td>
                <td>{timestamp}</td>
            </tr>
            <tr>
                <td>System:</td>
                <td>{system}</td>
            </tr>
            <tr>
                <td>Generated by:</td>
                <td>{username}</td>
            </tr>
            <tr>
                <td>App Version:</td>
                <td>{version}</td>
            </tr>
        </table>
    </div>
"""

    # Add each figure
    for i, fig in enumerate(figs):
        div_id = f"plot-{i}"
        html_output += f"""    <div id="{div_id}" class="plot-container"></div>\n"""

        # Convert figure to JSON
        plot_json = plotly.io.to_json(fig)

        # Add script to render this figure
        html_output += f"""
    <script type="text/javascript">
        (function() {{
            var figure = {plot_json};
            Plotly.newPlot('{div_id}', figure.data, figure.layout, {{responsive: true}});
        }})();
    </script>
"""

    # Close HTML
    html_output += """
</body>
</html>"""

    return html_output

# Add a new debugging helper function to validate HTML structure


def validate_html_structure(html_content):
    """
    Validates basic HTML structure and returns info about missing tags

    Args:
        html_content (str): HTML content to validate

    Returns:
        dict: Information about HTML structure
    """
    info = {
        "has_html_tags": "<html" in html_content and "</html>" in html_content,
        "has_head_tags": "<head" in html_content and "</head>" in html_content,
        "has_body_tags": "<body" in html_content and "</body>" in html_content,
        "has_plotly_div": '<div class="plotly-graph-div' in html_content,
        "has_scripts": '<script' in html_content and '</script>' in html_content,
        "length": len(html_content)}
    return info


def write_debug_info(filename, content, message="Debug info"):
    """
    Write debug info to a file for diagnostics

    Args:
        filename (str): File to write to
        content (str): Content to write
        message (str): Message to include
    """
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"/* {message} */\n\n")
        f.write(content)
