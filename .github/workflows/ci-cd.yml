name: OpenFAST Plotter CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]  # Updated to use only supported Python versions

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Ensure psutil is installed for Dash testing
        pip install psutil

    # Skip installing pytest-dash as it has compatibility issues with newer selenium
    # Instead, install selenium directly for testing
    - name: Install test dependencies
      run: |
        pip install selenium playwright
        python -m playwright install --with-deps firefox

    - name: Download test files
      run: |
        # Download test files from OpenFAST r-test repository
        mkdir -p test_files  # Ensure directory exists
        python -c "
        import os
        import requests
        from pathlib import Path
        
        TEST_FILES = {
            '5MW_Land_BD_DLL_WTurb': 'https://github.com/OpenFAST/r-test/raw/main/glue-codes/openfast/5MW_Land_BD_DLL_WTurb/5MW_Land_BD_DLL_WTurb.outb',
            '5MW_Land_DLL_WTurb': 'https://github.com/OpenFAST/r-test/raw/main/glue-codes/openfast/5MW_Land_DLL_WTurb/5MW_Land_DLL_WTurb.outb'
        }
        
        output_dir = './test_files'
        os.makedirs(output_dir, exist_ok=True)
        
        for name, url in TEST_FILES.items():
            file_name = f'{name}.outb'
            destination = os.path.join(output_dir, file_name)
            print(f'Downloading {file_name}...')
            response = requests.get(url)
            if response.status_code == 200:
                with open(destination, 'wb') as f:
                    f.write(response.content)
                print(f'Downloaded to {destination}')
        "
        # List downloaded files
        find ./test_files -type f -name "*.outb" -ls

    - name: Ensure tools directory is discoverable
      run: |
        # Create an empty __init__.py file if it doesn't exist to make the tools module discoverable
        mkdir -p tools
        touch tools/__init__.py
        # Ensure tests directory is a proper package
        mkdir -p tests
        touch tests/__init__.py

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        # Make sure the current directory is in PYTHONPATH to find modules
        PYTHONPATH=$PYTHONPATH:$(pwd) pytest tests/test_utils.py tests/test_fft_analysis.py tests/test_html_export.py tests/test_signal_selection.py --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
  
  # Add a build job for Docker image if needed
  build-docker:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: openfast-plotter:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
